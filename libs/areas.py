from numba import njit, prangeimport numpy as np@njitdef unstable_nodes(grid_list, Z_c, Z_c_percentage=0.8):    """    Identify unstable nodes in a list of grids.    Parameters    ----------    grid_list : list of numpy.ndarray        List of grids.    Z_c : float        Parameter for Z_c extraction.    Z_c_percentage : float, optional        Threshold percentage for considering nodes unstable, by default 0.8.    Returns    -------    numpy.ndarray        Array of grids with identified unstable nodes.    Notes    -----    This function iterates through a list of grids and identifies unstable nodes    based on the specified threshold percentage (`Z_c_percentage`). The identified    nodes are marked as 1, and nodes exceeding the Z_c parameter are marked as 2.    Examples    --------    >>> grid_list = [np.zeros((10, 10), dtype=np.float32)]    >>> unstable_grids = (np.array(grid_list), Zc, Zc_porcentaje=0.8)    """    N = len(grid_list[0])    D = 2    unstable_grids = np.zeros((len(grid_list), N+2, N+2))    for i in prange(len(grid_list)):        B = grid_list[i]        S = np.zeros((N+2, N+2))        for j in range(1, N+1):            for k in range(1, N+1):                Z = B[j, k] - (1/(2*D))*(B[j+1, k] +                                         B[j-1, k]+B[j, k+1]+B[j, k-1])                if abs(Z) > Z_c_percentage:                    S[j, k] = 1                if abs(Z) > Z_c:                    S[j, k] = 2        unstable_grids[i] = S    return unstable_gridsdef avalanche_areas_func(area_list):    """    Calculate avalanche areas from a list of area matrices.    Parameters    ----------    area_list : list of numpy.ndarray        List of area matrices.    Returns    -------    tuple        A tuple containing:            - total_avalanche_areas : List of total avalanche areas.            - per_avalanche_areas : List of avalanche areas per avalanche.    Notes    -----    This function processes a list of area matrices and calculates the total    avalanche areas as well as the areas per individual avalanche.    Examples    --------    >>> area_list = [np.zeros((10, 10), dtype=np.float32)]    >>> total_areas, per_avalanche_areas = avalanche_areas_func(area_list)    """    total_avalanche_areas = []    per_avalanche_areas = []    current_avalanche = []    for matrix in area_list:        if (matrix > 0).any():            current_avalanche.append(matrix)        else:            total_avalanche_areas.append(sum(current_avalanche))            per_avalanche_areas.append(current_avalanche)            current_avalanche = []    total_avalanche_areas = [        i for i in total_avalanche_areas if np.sum(i) != 0]    per_avalanche_areas = [i for i in per_avalanche_areas if np.sum(i) != 0]    return total_avalanche_areas, per_avalanche_areas